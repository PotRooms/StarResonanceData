syntax = "proto3";

package chat.pb;

option go_package = "./;chat_pb";

enum CHAT_CLIENT_CMD {
    CHAT_CLIENT_CMD_INVALID = 0;
    CHAT_CLIENT_REGISTER_REQ = 101;
    CHAT_CLIENT_REGISTER_RSP = 102;
    CHAT_CLIENT_UNREGISTER_REQ = 103;
    CHAT_CLIENT_UNREGISTER_RSP = 104;
    CHAT_CLIENT_PRIVATE_CHAT_REQ = 105;
    CHAT_CLIENT_PRIVATE_CHAT_RSP = 106;
    CHAT_CLIENT_CHANNEL_CHAT_REQ = 107;
    CHAT_CLIENT_CHANNEL_CHAT_RSP = 108;
    CHAT_CLIENT_WORLD_CHAT_REQ = 109;
    CHAT_CLIENT_WORLD_CHAT_RSP = 110;
    CHAT_CLIENT_GET_PRIVATE_CHAT_RECORD_REQ = 111;
    CHAT_CLIENT_GET_PRIVATE_CHAT_RECORD_RSP = 112;
    CHAT_CLIENT_GET_CHANNEL_CHAT_RECORD_REQ = 113;
    CHAT_CLIENT_GET_CHANNEL_CHAT_RECORD_RSP = 114;
    CHAT_CLIENT_GET_WORLD_CHAT_RECORD_REQ = 115;
    CHAT_CLIENT_GET_WORLD_CHAT_RECORD_RSP = 116;
    CHAT_CLIENT_DEL_PRIVATE_CHAT_RECORD_REQ = 117;
    CHAT_CLIENT_DEL_PRIVATE_CHAT_RECORD_RSP = 118;
    CHAT_CLIENT_GET_CHANNEL_GROUP_INFO_REQ = 119;
    CHAT_CLIENT_GET_CHANNEL_GROUP_INFO_RSP = 120;
    CHAT_CLIENT_CHANNEL_GROUP_SWITCH_REQ = 121;
    CHAT_CLIENT_CHANNEL_GROUP_SWITCH_RSP = 122;
    CHAT_CLIENT_ADD_BLACKLIST_REQ = 123;
    CHAT_CLIENT_ADD_BLACKLIST_RSP = 124;
    CHAT_CLIENT_REMOVE_BLACKLIST_REQ = 125;
    CHAT_CLIENT_REMOVE_BLACKLIST_RSP = 126;
    CHAT_CLIENT_GET_BLACKLIST_REQ = 127;
    CHAT_CLIENT_GET_BLACKLIST_RSP = 128;
    CHAT_CLIENT_SYNC_BLACKLIST_REQ = 129;
    CHAT_CLIENT_SYNC_BLACKLIST_RSP = 130;
    CHAT_CLIENT_GET_PERSONAL_BAN_INFO_REQ = 131;
    CHAT_CLIENT_GET_PERSONAL_BAN_INFO_RSP = 132;
    CHAT_CLIENT_DEL_CHANNEL_CHAT_RECORD_REQ = 133;
    CHAT_CLIENT_DEL_CHANNEL_CHAT_RECORD_RSP = 134;
    CHAT_CLIENT_DEL_WORLD_CHAT_RECORD_REQ = 135;
    CHAT_CLIENT_DEL_WORLD_CHAT_RECORD_RSP = 136;
    CHAT_CLIENT_READ_PRIVATE_LAST_MSG_INDEX_REQ = 137;
    CHAT_CLIENT_READ_PRIVATE_LAST_MSG_INDEX_RSP = 138;
    CHAT_CLIENT_PRIVATE_CHAT_RECEIVE = 152;
    CHAT_CLIENT_CHANNEL_CHAT_RECEIVE = 154;
    CHAT_CLIENT_WORLD_CHAT_RECEIVE = 156;
    CHAT_CLIENT_EVENT_NOTICE = 158;
}
message JoinChannelInfo {
    string ChannelID = 1;
    uint32 MsgCount = 2;
}
message ClientRegisterReq {
    string ClientID = 1;
    string ClientToken = 2;
}
message ClientRegisterRsp {
    chat.pb.ClientRegisterRsp.ClientRegisterCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    repeated chat.pb.JoinChannelInfo JoinChannelList = 4;
    enum ClientRegisterCode {
        SUCCESS = 0;
        TOKEN_INVALID = 1;
        ALREADY_REGISTER = 2;
    }
}
message ClientUnRegisterReq {
    string ClientID = 1;
    string ClientToken = 2;
}
message ClientUnRegisterRsp {
    chat.pb.ClientUnRegisterRsp.ClientUnRegisterCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    enum ClientUnRegisterCode {
        SUCCESS = 0;
        TOKEN_INVALID = 1;
        NOT_REGISTER = 2;
    }
}
message PrivateChatReq {
    string FromClientID = 1;
    bytes Baseinfo = 2;
    string ToClientID = 3;
    string Msg = 4;
}
message PrivateChatRsp {
    chat.pb.PrivateChatRsp.PrivateChatCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    string ToClientID = 4;
    uint32 LeftCdTime = 5;
    bytes Baseinfo = 6;
    string ChatMsg = 7;
    enum PrivateChatCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        IN_BAN = 3;
        IN_BLACK_LIST = 4;
        CD_LIMIT = 5;
        TARGET_CLIENTID_INVALID = 6;
    }
}
message ChannelChatReq {
    string FromClientID = 1;
    bytes Baseinfo = 2;
    string ChannelID = 3;
    string Msg = 4;
}
message ChannelChatRsp {
    chat.pb.ChannelChatRsp.ChannelChatCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    string ChannelID = 4;
    uint32 LeftCdTime = 5;
    bytes Baseinfo = 6;
    string ChatMsg = 7;
    enum ChannelChatCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        CHANNEL_ID_INVALID = 3;
        NOT_MEMBER = 4;
        IN_BAN = 5;
        CD_LIMIT = 6;
        COUNT_LIMIT = 7;
    }
}
message WorldChatReq {
    string FromClientID = 1;
    bytes Baseinfo = 2;
    string Msg = 3;
}
message WorldChatRsp {
    chat.pb.WorldChatRsp.WorldChatCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    uint32 LeftCdTime = 4;
    bytes Baseinfo = 5;
    string ChatMsg = 6;
    enum WorldChatCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        IN_BAN = 3;
        CD_LIMIT = 4;
        COUNT_LIMIT = 5;
    }
}
message ChatRecord {
    string FromClientID = 1;
    bytes Baseinfo = 2;
    string Msg = 3;
    int64 SendTime = 4;
    uint64 Index = 5;
}
message GetPrivateRecordReq {
    string ClientID = 1;
    string TargetClientID = 2;
    bool IsBatchGet = 3;
    uint32 StartIndex = 4;
    uint32 Count = 5;
}
message GetPrivateRecordRsp {
    chat.pb.GetPrivateRecordRsp.GetPrivateRecordCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    string TargetClientID = 4;
    repeated chat.pb.ChatRecord RecordList = 5;
    uint32 TotalCount = 6;
    uint32 UnReadCount = 7;
    uint64 ReadedLastIndex = 8;
    enum GetPrivateRecordCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        INDEX_ERR = 3;
    }
}
message GetChannelRecordReq {
    string ClientID = 1;
    string ChannelID = 2;
    bool IsBatchGet = 3;
    uint32 StartIndex = 4;
    uint32 Count = 5;
}
message GetChannelRecordRsp {
    chat.pb.GetChannelRecordRsp.GetChannelRecordCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    string ChannelID = 4;
    repeated chat.pb.ChatRecord RecordList = 5;
    uint32 TotalCount = 6;
    enum GetChannelRecordCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        CHANNEL_ID_INVALID = 3;
        NOT_MEMBER = 4;
        INDEX_ERR = 5;
    }
}
message GetWorldRecordReq {
    string ClientID = 1;
    bool IsBatchGet = 2;
    uint32 StartIndex = 3;
    uint32 Count = 4;
}
message GetWorldRecordRsp {
    chat.pb.GetWorldRecordRsp.GetWorldRecordCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    repeated chat.pb.ChatRecord RecordList = 4;
    uint32 TotalCount = 5;
    enum GetWorldRecordCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        INDEX_ERR = 3;
    }
}
message ReadPrivateLastMsgIndexReq {
    string ClientID = 1;
    string TargetClientID = 2;
    uint64 LastIndex = 3;
}
message ReadPrivateLastMsgIndexRsp {
    chat.pb.ReadPrivateLastMsgIndexRsp.ReadPrivateLastMsgIndexCode Code = 1;
    string Msg = 2;
    string ClientID = 3;
    string TargetClientID = 4;
    uint64 LastIndex = 5;
    enum ReadPrivateLastMsgIndexCode {
        SUCCESS = 0;
        INNER_ERR = 1;
        NOT_REGISTER = 2;
        INDEX_ERR = 3;
    }
}
message ChatMessage {
    string FromClientID = 1;
    bytes Baseinfo = 2;
    string Msg = 3;
    int64 SendTime = 4;
    uint64 Index = 5;
}
message PrivateMessage {
    string ClientID = 1;
    repeated chat.pb.ChatMessage MsgList = 2;
}
message PrivateChatReceive {
    repeated chat.pb.PrivateMessage MsgList = 1;
}
message ChannelMessage {
    string ClientID = 1;
    string ChannelID = 2;
    repeated chat.pb.ChatMessage MsgList = 3;
}
message ChannelChatReceive {
    repeated chat.pb.ChannelMessage MsgList = 1;
}
message WorldMessage {
    string ClientID = 1;
    repeated chat.pb.ChatMessage MsgList = 2;
}
message WorldChatReceive {
    repeated chat.pb.WorldMessage MsgList = 1;
}
message ChatEventNotice {
    chat.pb.ChatEventNotice.CHAT_EVENT_TYPE EventType = 1;
    string ID = 2;
    uint32 State = 3;
    enum CHAT_EVENT_TYPE {
        CHAT_EVENT_TYPE_NONE = 0;
        CHAT_EVENT_TYPE_CHANNEL_JOIN = 1;
        CHAT_EVENT_TYPE_CHANNEL_OUT = 2;
        CHAT_EVENT_TYPE_CHANNEL_GROUP_CHANGE = 3;
        CHAT_EVENT_TYPE_PERSONAL_BAN_CHANGE = 4;
        CHAT_EVENT_TYPE_CHANNEL_BAN_CHANGE = 5;
        CHAT_EVENT_TYPE_CHANNEL_GROUP_BAN_CHANGE = 6;
    }
}
message BaseInfo {
    int32 charId = 1;
    int32 headId = 2;
    int32 modelId = 3;
    int64 playerUuid = 4;
    string playerName = 5;
    int32 playerLevel = 6;
}
